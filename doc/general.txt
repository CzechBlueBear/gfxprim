General information
-------------------
Gfxprim is simple modular 2D bitmap graphics library with emphasis on speed
and correctness.

One of the key points of the library is meta-programming. Most of the
operations and filters are wriiten in http://jinja.pocoo.org/[Jinja]
templating language that is used to generate specialized code in C
programmming language. Creating code that works with less usuall pixel types
should be as easy as adding pixel definition into the configuration and
rebuilding the library. Read more link:gen.html[here].

Parts of the library
~~~~~~~~~~~~~~~~~~~~

Core
^^^^

Core of the library contains minimal amount of code to define interface that
is shared between all parts of the library.

The most important part of the core is link:context.html[CP_Context] structure
that represents in-memory pixmap.

The Core also contains generated code for basic operations such as
link:get_put_pixel.html[GetPixel] and link:get_put_pixel.html[PutPixel] and
optimized code for writing continous line of pixels 'GP_WritePixels' that are
base for the more complex drawing primitives in GFX or for graphics operations
in Filters.

link:blits.html[Blits] are functions used to copy part of one bitmap into
another bitmap. The blits be also used for primitive bitmap pixel type
conversions (i.e.  RGB888 vs BGR888).

link:progress_callback.html[Progress Callback] is an interface that allows you
to monitor progress of an operation it is mainly used in loaders and filters.
Generally any operation that is not really quick takes optional pointer to
progress callback that allows your program to monitor and possibly abort the
operation.

link:debug.html[Debug] interface is used as unified facility to print debug
messages, control debug level, etc.

There is also support for link:gamma.html[Gamma] correction. Unfortunatelly
not all parts of library use it at the moment.

And last but not least Core is a home for some link:core.html[common macros]
that are used from different parts of the library.

Graphics Rendering
^^^^^^^^^^^^^^^^^^
* Basic Graphics Primitives (with and without fill)
** PutPixel/GetPixel
** Lines
** Circles
** Ellipses
** Polygons

* Text Drawing
** Supports both proportional and non proportional fonts
** Basic fonts are compiled in the library
** Font rendering can be altered by style attributes
** Supports, for example, pixel multiplication and tracking
** Includes basic support for freetype

* Bitmaps and Blitting
** Create, Destroy bitmap
** Subcontext, rectangular region in one context could be used as a context
** Fast specialized blits (with 90, 180 and 270 degree rotation)

* Image loading/saving
** Read and Write support for PNG
** Read and Write support for JPEG
** Read support for BMP
** Read support for GIF

* Graphic backed input event handling
** Linux Frame-buffer
** SDL support
** Experimental X11 support

Bitmap Filters
^^^^^^^^^^^^^^
* Point filters
** Brightness
** Contrast
** General Point filter

* Linear filters
** Specialized Gaussian blur
** Separable Convolution
** General Convolution

* Arithmetics filters
** Addition
** Multiplication
** Difference
** Maximum, Minimum

* Floyd Steinberg dithering

* Bitmap resampling algorithms
** Nearest Neighbour
** Bilinear
** Cubic

* Bitmap rotation and mirroring
** 90 180 and 170 degree rotation

* Histogram generator

Work in progress
~~~~~~~~~~~~~~~~

* Python bindings
** basic support works now
** could be combined with PyGTK for GUI drawing (experimental)

* Anti Aliased drawing
** Line and PutPixel are finished

* Gamma correction and color profiles

