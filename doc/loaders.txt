Context loaders
---------------
This part of gfxprim library aims to create API to load/save images from/to
common image file formats.

All loading functions returns a pointer to allocated and loaded image or upon
a failure 'NULL' is returned and 'errno' is set.

The possible errno values are:

* anything returned by fopen(), fclose(), fseek(), ...
* 'ENOSYS' if library wasn't compiled with particual library support
* 'ENOMEM' as returned by malloc()
* 'EIO'/'EILSEQ' invalid image data
* 'ECANCELED' loading canceled from callback

Common Loader
~~~~~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_Loaders.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadImage(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads image from a file. The format is now matched by an image file extension.
File sinature loading method is on the TODO.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_Loaders.h>
/* or */
#include <GP.h>

int GP_SaveImage(GP_Context *src, const char *dst_path,
                 GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Saves a context into a file. The file format is matched accordingly to the
file extension, if extension is invalid or if support for request image format
wasn't compiled in, non-zero is returned and 'errno' is set to 'ENOSYS'.

Returns zero on succes and non-zero on failure and 'errno' is set. The
possible errno values are 'ENOSYS' for unknown format and anything that could
be returned by 'fopen()', 'open()', 'fwrite()', 'write()', 'seek()', etc...

PNG
~~~
The 'PNG' loading support is optionaly implemented by libpng.

Just now, the 'PNG' support is not fully finished. Images with alpha channel
are not supported yet.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNG.h>
/* or */
#include <GP.h>

int GP_OpenPNG(const char *src_path, FILE **f);
-------------------------------------------------------------------------------

Opens file and checks for 'PNG' signature.  Returns zero on success (file
could be opened, signature matches), the opened file is returned and the file
possition points right after the end of the 'PNG' signature.

Upon failure 'errno' is filled.

This function is semi-internal, you should rather use functions listed below.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNG.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadPNG(FILE *f, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'PNG' file into context the file pointer must point to the start of the
'PNG' data stream (eg. should point right after the signature). The context,
to store the image to, is allocated. The loading process could by aborted by a
callback, in such case all memory is freed.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNG.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadPNG(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Same as abowe but takes path to the file as a parameter and check for the
signature. Basically this combines both of the calls above.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNG.h>
/* or */
#include <GP.h>

int GP_SavePNG(const GP_Context *src, const char *dst_path,
               GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Writes a Context into a 'PNG' image. If aborted by a callback, the opened file
is closed and removed before the call returns non-zero and 'errno' is set to
'ECANCELED'.

Currently only 'RGB888' format is supported, you should convert the
'GP_Context' to 'RGB888' before calling this function otherwise non-zero is
returned and 'errno' is set to 'ENOSYS'. 

JPEG
~~~~
The 'JPEG' loading support is optionaly implemented by jpeg library.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JPG.h>
/* or */
#include <GP.h>

int GP_OpenJPG(const char *src_path, FILE **f);
-------------------------------------------------------------------------------

Opens file and checks for 'JPG' signature upon successful return (file could
be opened, signature matches), the opened file is returned and the file
possition points right after the end of the 'JPG' signature.

This function is semi-internal, you should rather use functions listed below.

'TODO:' This is not finished yet, currently this just opens and returns the
file and the 'GP_ReadJPG()' reads the signature instead.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JPG.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadJPG(FILE *f, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'JPG' file into context the file pointer must point to the start of the
'JPG' data stream (eg. should point right after the signature). The context,
to store the image to, is allocated. The loading process could by aborted by a
callback, in such case all memory is freed and the call returns 'NULL' and
'errno' is set to 'ECANCELED'.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JPG.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadJPG(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Same as abowe but takes path to the file as a parameter and check for the
signature. Basically this combines both of the calls above.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JPG.h>
/* or */
#include <GP.h>

int GP_SaveJPG(const GP_Context *src, const char *dst_path,
               GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Writes a Context into a 'JPG' image. If aborted by a callback, the opened file
is closed and removed before the call returns non-zero and 'errno' is set to
'ECANCELED'.

The 'JPG' format could store either 'G8' or 'RGB888' pixeltypes and you must
convert the context into one of them before this fucntions is called.

GIF
~~~

The 'GIF' format is supported optionaly by giflib library.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_GIF.h>
/* or */
#include <GP.h>

int GP_OpenGIF(const char *src_path, void **f);
-------------------------------------------------------------------------------

Opens file and checks for 'GIF' signature upon successful return (file could
be opened, signature matches) zero is returned and gif handle f is set
otherwise non-zero is returned and 'errno' is set.

This function is semi-internal, you should rather use functions listed below.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_GIF.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadGIF(void *f, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'GIF' file into context. The pointer must point to the 'GIF' handle as
returned by 'GP_OpenGIF()' function. The context, to store the image to, is
allocated. The loading process could by aborted by a callback, in such case
all memory is freed and the call returns 'NULL' and 'errno' is set to
'ECANCELED'.

Currently this function loads only first image from the gif container.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_GIF.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadGIF(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Same as abowe but takes path to the file as a parameter and check for the
signature. Basically this combines both of the calls above.

BMP
~~~

The 'BMP' loading support is nearly complete the only missing features should
be fancy RGB compressions and RLE support.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_BMP.h>
/* or */
#include <GP.h>

int GP_OpenBMP(const char *src_path, FILE **f,
               GP_Size *w, GP_Size *h, GP_PixelType *pixel_type);
-------------------------------------------------------------------------------

Opens file and checks for 'BMP' signature upon successful return (file could
be opened, signature matches) zero is returned and the parameters, if
non-'NULL', are initalized. Upon failure non-zero is returned and 'errno' is
set.

This function is semi-internal, you should rather use functions listed below.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_BMP.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadBMP(FILE *f, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'BMP' file into context. The 'FILE' pointer must point to opened 'BMP'
file. The context, to store the image to, is allocated. The loading process
could by aborted by a callback, in such case all memory is freed and the call
returns 'NULL' and 'errno' is set to 'ECANCELED'.

Currently this function loads only first image from the 'GIF' container.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_BMP.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadBMP(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Same as abowe but takes path to the file as a parameter and check for the
signature. Basically this combines both of the calls above.

PBM, PGM, PPM
~~~~~~~~~~~~~

There is a code do load and write 'PBM', 'PGM' and 'PPM' images too. However
it's not finished and its API is outdated. Use at your own risk.

