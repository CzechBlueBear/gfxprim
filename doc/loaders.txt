Context loaders
---------------
This part of GFXprim library aims to create API to load and save images
from/to common image file formats.

Currently we support 'JPEG', 'PNG', 'BMP', 'TIFF' and 'PNM' images for loading
and saving and 'GIF', 'JPEG2000' and 'PSP' for loading.

Have a look at the link:about.html#Loaders[supported formats].

Image Loaders and Savers
~~~~~~~~~~~~~~~~~~~~~~~~

All loading functions exists in at least two flavors. One that works with a
path to a file and one that reads from an link:loaders_io.html[IO stream].

All loading functions returns a pointer to newly  allocated and loaded image
or upon a failure 'NULL' and 'errno' is set.

All saving functions returns zero on success and non-zero on failure.  If
image saving is aborted by a callback, the opened file is closed and removed
from a file-system before the call returns.

The signature matching functions takes a  32 bytes long buffer and looks for a
valid image signature. If signature is found non-zero is returned.

In case of a failure 'errno' is set, possible 'errno' values are:

* anything returned by +open()+, +close()+, +lseek()+, +read()+, +write()+, ...
 - 'ENOENT' if file doesn't exist
 - 'EACCES' if process doesn't have rights
 - etc.

* 'ENOSYS'    if GFXprim wasn't compiled with particular library support
* 'ENOMEM'    if returned by +malloc()+
* 'EIO', 'EINVAL' invalid image data (wrong signature, wrong or too short header or image data)
* 'ECANCELED' action canceled by returning non-zero from within a callback

You can get more information about the error condition by turning on GFXprim
link:environment_variables.html#GP_DEBUG[debug messages].

[[Load_Image]]
[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_Loader.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadImage(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads an image from a file.

The image format is first guessed by the file extension. If loader for the
file extension is found it's called and if it succeeds the image data is
returned.

If file extension based guess fails either because the extension wasn't
matched or if the loader for the extension failed; the signature based method
is used.  The loader loads several bytes (currently 32) from the file and
calls signature matching functions for each format that implements signature
matching. If image signature is found image loader it is called and the result
is returned.

If file extension disagrees with file signature on the file format a warning
is printed into the 'stderr'.

[[Save_Image]]
[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_Loader.h>
/* or */
#include <GP.h>

int GP_SaveImage(GP_Context *src, const char *dst_path,
                 GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Saves a context into a file.

The file format is matched accordingly to the file extension.

If extension is not found non-zero is returned and 'errno' is set to 'EINVAL'.

If extension was found but support for saving the image format is not
implemented 'errno' is set to 'ENOSYS' (this may happen in case that GFXprim
wasn't compiled with support for this image type).

If context pixel type is not supported by the format 'errno' is set to
'EINVAL'.

[[Register_Loader]]
Advanced Loaders usage
^^^^^^^^^^^^^^^^^^^^^^

[source,c]
-------------------------------------------------------------------------------
typedef struct GP_Loader {
	/*
	 *  Loads an image.
	 *
	 *  Returns allocated and initialized bitmap on success, NULL on failure
	 *  and errno must be set.
	 */
	GP_Context *(*Load)(const char *src_path, GP_ProgressCallback *callback);

	/*
	 * Save an image.
	 *
	 * Returns zero on success, non-zero on failure and errno must be set.
	 */
	int (*Save)(const GP_Context *src, const char *dst_path,
	            GP_ProgressCallback *callback);

	/*
	 * The buffer is filled with 32 bytes from an image start, returns 1 if
	 * image signature was found zero otherwise.
	 */
	int (*Match)(const void *buf);

	/*
	 * Short format name.
	 */
	const char *fmt_name;

	/* don't touch */
	struct GP_Loader *next;

	/*
	 * NULL terminated array of file extensions.
	 */
	const char *extensions[];
} GP_Loader;

/*
 * List loaders into the stdout.
 */
void GP_ListLoaders(void);

/*
 * Register a loader.
 */
void GP_LoaderRegister(GP_Loader *self);

/*
 * Unregister loader.
 */
void GP_LoaderUnregister(GP_Loader *self);
-------------------------------------------------------------------------------

The 'GP_Loader' structure describes an image loader.

The 'Load', 'Save' and 'Match' functions could be 'NULL' if the particular
functionality is not implemented.

The 'fmt_name' is a short string that describes the format. For example:
'Netbpm portable pixmap'.

The extensions is 'NULL'-terminated array of strings that holds all possible
extensions that are commonly used for this image format.

All internal loaders are all described in list of this structures which is
used to implement functions such as 'GP_LoadImage()'.

You can print currently active loaders via the 'GP_ListLoaders()'. Register and
unregister your own loaders by 'GP_LoaderRegister()' and
'GP_LoaderUnregister()'. Once image loader is registered the generic loading
functions can use it to load and save images.

TIP: For example usage see image loader registration
link:example_loader_registration.html[example].

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_Loader.h>
/* or */
#include <GP.h>

const GP_Loader *GP_MatchSignature(const void *buf)
-------------------------------------------------------------------------------

Returns pointer to image loader accordingly to image signature or 'NULL' if no
suitable loader was found. The buf pointer must point to a buffer at least 32
bytes long.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_Loader.h>
/* or */
#include <GP.h>

const GP_Loader *GP_MatchExtension(const char *path)
-------------------------------------------------------------------------------

Matches loader by the file extension. This function does not check that the
file exists or that it could be opened it only looks at the extension (i.e.
string after the dot) and matches it against known extensions.

WARNING: If you attempt to modify the content of the structure the behavior is
         undefined. Most likely the program will crash.

PNG Loader
~~~~~~~~~~
The 'PNG' image support is implemented by the libpng library.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNG.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadPNG(GP_IO *io, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Reads a 'PNG' image from readable 'GP_IO'. The link:loaders_io.html[IO stream]
is expected to start exactly at the 'PNG' file signature.

Returns newly allocated context (containing decompressed image) or in case of
failure 'NULL' and 'errno' is set.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNG.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadPNG(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads a 'PNG' image from a file.

Returns a pointer to newly allocated loaded image, or in case of failure
'NULL' and 'errno' is set.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNG.h>
/* or */
#include <GP.h>

int GP_SavePNG(const GP_Context *src, const char *dst_path,
               GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Saves a 'Context' into a 'PNG' image, in case particular pixel type is not
supported non-zero is returned and 'errno' is set to 'ENOSYS'.

Supports 'G1', 'G2', 'G4', 'G8', 'G16', and 8-bit 'RGB' and 'RGBA' pixel
types.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNG.h>
/* or */
#include <GP.h>

int GP_MatchPNG(const void *buf);
-------------------------------------------------------------------------------

Matches a 'PNG' file signature. Returns non-zero if found.

JPEG Loader
~~~~~~~~~~~
The 'JPEG' image support is implemented by the jpeg library.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JPG.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadJPG(GP_IO *io, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Reads a 'JPEG' image from readable 'GP_IO'. The link:loaders_io.html[IO
stream] is expected to start exactly at the 'JPEG' file signature.

Returns newly allocated context (containing decompressed image) or in case of
failure 'NULL' and 'errno' is set.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JPG.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadJPG(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads an 'JPEG' image from a file.

Returns a pointer to newly allocated loaded image, or in case of failure
'NULL' and 'errno' is set.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JPG.h>
/* or */
#include <GP.h>

int GP_SaveJPG(const GP_Context *src, const char *dst_path,
               GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Writes a 'Context' into a 'JPEG' image. If aborted by a callback, the opened
file is closed and removed before the call returns non-zero and 'errno' is set
to 'ECANCELED'.

The 'JPEG' format could store either 'G8' or 8-bit 'RGB' pixel-types.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JPG.h>
/* or */
#include <GP.h>

int GP_MatchJPG(const void *buf);
-------------------------------------------------------------------------------

Matches a 'JPEG' file signature. Returns non-zero if found.

JPEG 2000 Loader
~~~~~~~~~~~~~~~~
The 'JPEG 2000' image support is implemented using the openjpeg library.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JP2.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadJP2(GP_IO *io, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Reads a 'JPEG2000' image from readable 'GP_IO'. The link:loaders_io.html[IO
stream] is expected to start exactly at the 'JPEG2000' file signature.

Returns newly allocated context (containing decompressed image) or in case of
failure 'NULL' and 'errno' is set.

NOTE: Due to limitations of the openjpeg library progress callback does not work.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JP2.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadJP2(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'JPEG2000' image from a file.

NOTE: Due to limitations of the openjpeg library progress callback does not work.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_JP2.h>
/* or */
#include <GP.h>

int GP_MatchJP2(const void *buf);
-------------------------------------------------------------------------------

Matches a 'JPEG2000' file signature. Returns non-zero if found.

GIF Loader
~~~~~~~~~~

The 'GIF' image support is implemented by the giflib library.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_GIF.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadGIF(GP_IO *io, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Reads a 'GIF' image from readable 'GP_IO'. The link:loaders_io.html[IO stream]
is expected to start exactly at the 'GIF' file signature.

Returns newly allocated context (containing decompressed image) or in case of
failure 'NULL' and 'errno' is set.

NOTE: Currently this function loads only first image from the 'GIF' container.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_GIF.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadGIF(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'GIF' image from a file.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_GIF.h>
/* or */
#include <GP.h>

int GP_MatchGIF(const void *buf);
-------------------------------------------------------------------------------

Matches a 'GIF' file signature. Returns non-zero if found.

BMP Loader
~~~~~~~~~~

The 'BMP' loading support is nearly complete the only missing features should
be exotic RGB compressions (RGB101010 for example) and RLE4 support.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_BMP.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadBMP(GP_IO *io, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Reads a 'BMP' image from readable 'GP_IO'. The link:loaders_io.html[IO stream]
is expected to start exactly at the 'BMP' file signature.

Returns newly allocated context (containing decompressed image) or in case of
failure 'NULL' and 'errno' is set.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_BMP.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadBMP(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'BMP' image from a file.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_BMP.h>
/* or */
#include <GP.h>

int GP_SaveBMP(const GP_Context *src, const char *dst_path,
               GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Writes a 'Context' into a 'BMP' file.

Currently only 8-bit 'RGB' formats are supported.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_BMP.h>
/* or */
#include <GP.h>

int GP_MatchBMP(const void *buf);
-------------------------------------------------------------------------------

Matches a 'BMP' file signature. Returns non-zero if found.

PSP Loader
~~~~~~~~~~

The 'PSP' loader can load a composite image from a Paint Shop Pro Image Files.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PSP.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadPSP(GP_IO *io, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Reads a 'PSP' image from readable 'GP_IO'. The link:loaders_io.html[IO stream]
is expected to start exactly at the 'PSP' file signature.

Returns newly allocated context (containing decompressed image) or in case of
failure 'NULL' and 'errno' is set.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PSP.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadPSP(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads a composite image from a 'PSP' file.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PSP.h>
/* or */
#include <GP.h>

int GP_MatchPSP(const void *buf);
-------------------------------------------------------------------------------

Matches a 'PSP' file signature. Returns non-zero if found.

PSD Loader
~~~~~~~~~~

The 'PSD' loader can load a merged image (if present) or a thumbnail from an
Adobe Photoshop Image. Currently 16bit RGB and 16bit CMYK is not supported and
the loader will fallback to the thumbnail in this case (which is always 8bit
RGB).

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PSD.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadPSD(GP_IO *io, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Reads a 'PSP' image from readable 'GP_IO'. The link:loaders_io.html[IO stream]
is expected to start exactly at the 'PSD' file signature.

Returns newly allocated context (containing decompressed image) or in case of
failure 'NULL' and 'errno' is set.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PSD.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadPSD(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads a merged image (if present) from a 'PSD' file.

Fallbacks to thumbnail if merged image is not present or has unsupported pixel
type.

Returns 'NULL' (TODO ERRNO) if merged image is not present/supported and
thumbnail is not present either.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PSD.h>
/* or */
#include <GP.h>

int GP_MatchPSD(const void *buf);
-------------------------------------------------------------------------------

Matches a 'PSD' file signature. Returns non-zero if found.

PNM Loaders
~~~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNM.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadPBM(const char *src_path, GP_ProgressCallback *callback);

GP_Context *GP_LoadPGM(const char *src_path, GP_ProgressCallback *callback);

GP_Context *GP_LoadPPM(const char *src_path, GP_ProgressCallback *callback);

GP_Context *GP_LoadPNM(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads either ASCII or Rawbits (binary) 'PBM', 'PGM' and 'PPM'.

The 'PNM' can load all of them i.e. 'PBM', 'PGM' and 'PPM'.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNM.h>
/* or */
#include <GP.h>

GP_Context *GP_SavePBM(const GP_Context *src, const char *dst_path,
                       GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Saves 'G1' (1 bit grayscale) image into ASCII 'PBM'.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNM.h>
/* or */
#include <GP.h>

GP_Context *GP_SavePGM(const GP_Context *src, const char *dst_path,
                       GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Saves 'G1', 'G2', 'G4' and 'G8' (1, 2, 4 and 8 bit grayscale) image into ASCII
'PGM'.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNM.h>
/* or */
#include <GP.h>

GP_Context *GP_SavePPM(const GP_Context *src, const char *dst_path,
                       GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Saves 'RGB888' (24 bit RGB) image into ASCII 'PPM'.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNM.h>
/* or */
#include <GP.h>

GP_Context *GP_SavePNM(const GP_Context *src, const char *dst_path,
                       GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Saves 'G1', 'G2', 'G4' and 'G8' (1, 2, 4, 8 bit grayscale) or 'RGB888' (24 bit
RGB) image into ASCII 'PNM'.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PNM.h>
/* or */
#include <GP.h>

int GP_MatchPBM(const void *buf);

int GP_MatchPGM(const void *buf);

int GP_MatchPPM(const void *buf);

int GP_MatchPNM(const void *buf);
-------------------------------------------------------------------------------

Matches either ASCII or Rawbits (binary) 'PBM', 'PGM' and 'PPM' file
signatures.

The 'PNM' matches all of the formats. i.e. 'PBM', 'PGM' and 'PPM'.

All functions return non-zero if found.

PCX Loader
~~~~~~~~~~

The 'PCX' loader can load ZSoft PCX images.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PCX.h>
/* or */
#include <GP.h>

GP_Context *GP_ReadPCX(GP_IO *io, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Reads a 'PCX' image from readable 'GP_IO'. The link:loaders_io.html[IO stream]
is expected to start exactly at the 'PCX' file signature.

Returns newly allocated context (containing decompressed image) or in case of
failure 'NULL' and 'errno' is set.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PCX.h>
/* or */
#include <GP.h>

GP_Context *GP_LoadPCX(const char *src_path, GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads a 'PCX' image from a file.

[source,c]
-------------------------------------------------------------------------------
#include <loaders/GP_PCX.h>
/* or */
#include <GP.h>

int GP_MatchPCX(const void *buf);
-------------------------------------------------------------------------------

Matches a 'PCX' file signature. Returns non-zero if found.
