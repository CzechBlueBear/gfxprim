Context loaders
---------------
This part of gfxprim library aims to create API to load/save images from/to
common image fileformats.

Common Loader
~~~~~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_LoadImage(const char *src_path, GP_Context **res,
                        GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads image from a file. The image format is now recognized by the file
filename extension. Format detection using file signature is planned.

The loading process could be aborted by process callback.

PNG
~~~

Just now, the 'PNG' support is not fully finished, the Alpha channel as well
as palletes doesn't work well or at all, we are working on that.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_OpenPNG(const char *src, FILE **f);
-------------------------------------------------------------------------------

Opens file and checks for 'PNG' signature upon successful return (file could
be opened, signature matches), the opened file is returned and the file
possition points right after the end of the 'PNG' signature.

This function is semi-internal, you should rather use functions listed below.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_ReadPNG(FILE *f, GP_Context **res,
                      GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'PNG' file into context the file pointer must point to the start of the
'PNG' data stream (eg. should point right after the signature). The context,
to store the image to, is allocated. The loading process could by aborted by a
callback, in such case all memory is freed and the call returns 'GP_EINTR'.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_LoadPNG(const char *src_path, GP_Context **res,
                      GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Same as abowe but takes path to the file as a parameter and check for the
signature. Basically this combines both of the calls abowe.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_SavePNG(const char *dst_path, GP_Context *src,
                      GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Writes a Context into a 'PNG' image. If aborted by a callback, the opened file
is closed and removed before the call returns 'GP_EINTR'.

Currently only 'RGB888' format is supported, you should convert the GP_Context
to 'RGB888' before calling this function otherwise 'GP_ENOIMPL' will be
returned.

JPG
~~~

The 'JPG' format is supported for both 'G8' as well as 'RGB888' pixel formats.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_OpenJPG(const char *src, FILE **f);
-------------------------------------------------------------------------------

Opens file and checks for 'JPG' signature upon successful return (file could
be opened, signature matches), the opened file is returned and the file
possition points right after the end of the 'JPG' signature.

This function is semi-internal, you should rather use functions listed below.

'TODO:' This is not finished yet, currently this just opens and returns the
file and the 'GP_ReadJPG()' reads the signature instead.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_ReadJPG(FILE *f, GP_Context **res,
                      GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Loads 'JPG' file into context the file pointer must point to the start of the
'JPG' data stream (eg. should point right after the signature). The context, to
store the image to, is allocated. The loading process could by aborted by a
callback, in such case all memory is freed and the call returns 'GP_EINTR'.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_LoadJPG(const char *src_path, GP_Context **res,
                      GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Same as abowe but takes path to the file as a parameter and check for the
signature. Basically this combines both of the calls above.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_SaveJPG(const char *dst_path, GP_Context *src,
                      GP_ProgressCallback *callback);
-------------------------------------------------------------------------------

Writes a Context into a 'JPG' image. If aborted by a callback, the opened file
is closed and removed before the call returns 'GP_EINTR'.

The 'JPG' format could store either 'G8' or 'RGB888' pixeltypes and you must
convert the context into one of them before this fucntions is called.

'TODO:' add parameters to change the encoding settings.

PBM
~~~

PBM -- portable bitmap file format.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_LoadPBM(const char *src, GP_Context **res);
-------------------------------------------------------------------------------

This function allocates and loads a 'GP_Context' with 'GP_PIXEL_G1' pixels. If
the return code is not zero ('GP_ESUCCESS') an error during loading the bitmap
happend.

The returned 'GP_Context' should be later freed with 'GP_ContextFree()'.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_SavePBM(const char *res, GP_Context *src);
-------------------------------------------------------------------------------

Save 'GP_Context' into PBM file. The 'GP_Context' pixel type must be
'GP_PIXEL_G1', otherwise 'GP_ENOIMPL' error is returned.

PGM
~~~
PBM -- portable graymap file format.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_LoadPGM(const char *src, GP_Context **res);
-------------------------------------------------------------------------------

While the format allows to have any integer bit depth, only following color
depths are supported:

* GP_PIXEL_1G
* GP_PIXEL_2G
* GP_PIXEL_4G
* GP_PIXEL_8G

This function allocates and loads a 'GP_Context'. If the return code is not
zero ('GP_ESUCCESS') an error during loading the bitmap happend.

The returned 'GP_Context' should be later freed with 'GP_ContextFree()'.

[source,c]
-------------------------------------------------------------------------------
#include <GP_Loaders.h>

GP_RetCode GP_SavePGM(const char *res, GP_Context *src);
-------------------------------------------------------------------------------

Save 'GP_Context' into PGM file. The pixel type must be one of:

* GP_PIXEL_1G
* GP_PIXEL_2G
* GP_PIXEL_4G
* GP_PIXEL_8G

Otherwise 'GP_ENOIMPL' is returned.

PNM
~~~

To be implemented.

PPM
~~~

To be implemented.


