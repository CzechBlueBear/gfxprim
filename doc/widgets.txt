Widgets
-------

There are several key design points that make this library a bit different than
the mainstream libraries but apart from that it's a just widget library,
nothing too unexpected here.

One of the major differencies is that widgets are represented by C structures
that store the widget state, read only access could be done just by accessing
the structure members. If you want to change the state you call helper function
that changes it, it may also do sanity checks, and marks the widget to be
repainted. Setting values may also invoke `on_event()` callback, e.g. if user
changes checkbox value the application will receive an event.

Another interesting point is that the library uncouples the GUI layout from the
actual application functionality. As a matter of a fact the layout can be
expressed in JSON and loaded from a file. It does not matter where the GUI
elements are put as far as the `on_event()` callbacks and widgets `uid` match.
An link:example_widgets_login.html[example code] is worth of thousands words.

Widget structure
----------------

Widget type and payload
~~~~~~~~~~~~~~~~~~~~~~~

Each widget is represented by a `gp_widget` structure that implements common
functionality for all widgets and among others has the `type` member that is
an enum of all implemented widget types. This is commonly used to distinguish
the type of widget we are working with and also for sanity checks. Each widget
also has an `on_event` callback and `priv` pointer which are reserved for the
application, i.e. not touched by the library.

The payload pointer points to the actual widget structure and is an anonymous
enum of all implemented widget structures so you can do `widget->tbox->buf`
instead of `((struct gp_widget_text_box)*widget->payload)->buf`. Which also
means that it's up to you to make sure which type of widget you are working
with.

Alignment and fill
~~~~~~~~~~~~~~~~~~

Another common functionality implemented in widget structure is alignment and
fill. In order to explain these we have to introduce how widgets are structured
in an layout.

The widgets are organized in a two dimensional tree where each widget/layer is
an rectangle in a plane. The rectanles on a given tree layer are distinct and
the rectanle on an upper layer contains all rectangles on lower layer.

The widget layout is computed in two steps, first minimal size is computed
recursively from the top level widget down to the leaf widgets, then if the
window is bigger than the minimal needed size, the leftover space is being
distributed between the widgets.

In order for a widget to take more space than the minimal size, i.e. be
resizable the horizontal and/or vertical alignment has to be set to fill. Which
especially means that layout can be resized only and only if the top level
layout widget is resizable. Apart from fill each widget can be set to be
positioned top/center/bottom vertically as well as left/center/right
horizontally.

Examples
~~~~~~~~

Grid horizontal and vertical alignment set to fill button to center.

image:grid_fill_button_center.png[Grid set to fill button to center]

.Widget layout in JSON
[source,json]
-------------------------------------------------------------------------------
{
 "align": "fill",
 "widgets": [
  {
   "type": "button",
   "label": "Button",
   "on_event": "on_event",
   "align": "center"
  }
 ]
}
-------------------------------------------------------------------------------

Horizontal and vertical alignment set to fill for both.

image:grid_fill_button_fill.png[Both grid and button set to fill]

.Widget layout in JSON
[source,json]
-------------------------------------------------------------------------------
{
 "align": "fill",
 "widgets": [
  {
   "type": "button",
   "label": "Button",
   "on_event": "on_event",
   "align": "fill"
  }
 ]
}
-------------------------------------------------------------------------------

Horizontal and vertical alignment set to center for grid, button alignment does
not matter in this case.

image:grid_center_button.png[Grid set to center]

.Widget layout in JSON
[source,json]
-------------------------------------------------------------------------------
{
 "align": "center",
 "widgets": [
  {
   "type": "button",
   "label": "Button",
   "on_event": "on_event",
  }
 ]
}
-------------------------------------------------------------------------------

Widgets
-------

.Generic widget JSON attributes
[cols=",,,3",options="header"]
|==============================================================================
|  Attribute |  Type  | Default  | Description
|   +uid+    | string |          | Widget universal id. Must be unique.
|   +align+  |  enum  | +center+ | Sets both +haling+ and +valign+ {+center+, +fill+}
|  +haling+  |  enum  | +center+ | Horizontal alignment {+center+, +left+, +right+, +fill+}
|  +valing+  |  enum  | +center+ | Vertical alignment {+center+, +top+, +bottom+, +fill+}
| +on_event+ | string |          | Widget event handler function name.
|==============================================================================

The `on_event` function is a widget link:widgets_events.html[event handler].

Individual widgets documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* link:widget_label.html[Label widget]
* link:widget_button.html[Button widget]
* link:widget_checkbox.html[Checkbox widget]
* link:widget_grid.html[Grid widget]
* link:widget_table.html[Table widget]
* link:widget_choice.html[Radiobutton widget]
* link:widget_choice.html[Spinbutton widget]
