Drawing Context
---------------

GP_Context is data structure for storing 'in memory' bitmaps.

Data Structure
~~~~~~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
typedef struct GP_Context {
	uint8_t *pixels;         /* Pointer to array of pixels              */
	uint8_t  bpp;            /* Bits per pixel, always be power of two  */
	uint32_t bytes_per_row;  /* Bytes per row, rows are padded to bytes */
	uint32_t w;              /* Width in pixels                         */
	uint32_t h;              /* Height in pixels                        */

	GP_PixelType pixel_type; /* Enum, bitmap pixel type id              */

	int axes_swap:1;         /* Context rotation and mirroring          */
	int x_swap:1;
	int y_swap:1;
 
	uint32_t clip_w_min;     /* Clipping rectanle                       */
	uint32_t clip_w_max;
	uint32_t clip_h_min;
	uint32_t clip_h_max;
} GP_Context;
-------------------------------------------------------------------------------

The 'GP_Context' holds metadata needed for bitmaps. The values of pixels
are stored as bitmap lines (aligned to bytes) in one dimensional array.
The addres of pixel could be determined by GP_PIXEL_ADDRESS(context, x, y)
which returns byte aligned addres for the pixel.

Rotation
^^^^^^^^

Rotation and mirroring is honored only by functions starting with extra T.
So GP_TLine() is equal to GP_Line(), when all axes_sawp, x_swap and y_swap are
set to zero.

There are various macros for transforming coordinates and sizes in
'core/GP_Transform.h'.

* *GP_TRANSFORM_POINT(x, y)*
* *GP_TRANSFORM_RECT(x, y, w, h)*
* *GP_RETRANSFORM_POINT(x, y)*

Clipping rectangle
^^^^^^^^^^^^^^^^^^

All drawing functions honor the clipping rectangle, eg. no pixels are put,
even when the coordinates are inside the bitmap, if they are outside of
clipping rectangle.

Functions
~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

GP_Context *GP_ContextAlloc(uint32_t w, uint32_t h, GP_PixelType type);
-------------------------------------------------------------------------------

Allocates and initalizes the 'GP_Context' structure. The size for pixels is
computed from width, height and pixel type. Moreover the rotation flags are
set to zero and clipping rectangle is set to whole bitmap.

The newly allocated context should be later freed with 'GP_ContextFree()'.

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

void GP_ContextFree(GP_Context *context);
-------------------------------------------------------------------------------

Free the context allocated memory.

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

GP_Context *GP_ContextCopy(GP_Context *context, int flag);
-------------------------------------------------------------------------------

Copy a context. Allocates and initalizes a 'GP_Context'. If flag is set to
GP_CONTEXT_WITH_PIXELS, the actuall bitmap is copied from contex to newly
allocated context, otherwise only context metadata are copied.

The newly created context should be later freed with 'GP_ContextFree()'.

