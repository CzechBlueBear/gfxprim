Drawing Context
---------------

GP_Context is data structure for storing 'in memory' bitmaps.

Data Structure
~~~~~~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
typedef struct GP_Context {
	uint8_t *pixels;         /* pointer to image pixels */
	uint8_t  bpp;            /* pixel length in bits */
	uint32_t bytes_per_row;
	uint32_t w;              /* width in pixels */
	uint32_t h;              /* height in pixels */
	/* 
         * Row bit offset. The offset is ignored for byte aligned pixels.
         * Basically it's used for non aligned pixels with combination
         * with subcontextes.
         */
        uint8_t offset;

	GP_PixelType pixel_type; /* pixel format enum */

	uint8_t axes_swap:1;         /* swap axes */
	uint8_t x_swap:1;            /* mirror x */
	uint8_t y_swap:1;            /* mirror y */
	uint8_t free_pixels:1;       /* if set GP_ContextFree() calls free on context->pixels */
} GP_Context;
-------------------------------------------------------------------------------

The 'GP_Context' holds meta-data needed for bitmap drawing. The bitmap is
stored in one dimensional array in byte-aligned lines.

Rotation
^^^^^^^^

The orientation flags affects the gfx and text drawing functions. If some of
the flags is changed the origin and direction of the drawing is changed. Note
that the image pixels are not affected by this at all only the coordinates
passed to drawing functions are transformed accordingly.

If you don't need this functionality just don't touch these flags the as
overhead of these transformations is not measurable.

If you really need drawing primitives that do not use the orientation flags,
you could use variants with _Raw suffix (altghoug this is not recommended).

There are various helper macros for transforming coordinates and sizes in
'core/GP_Transform.h'. And helper functions to "rotate" the context flags
clock wise and counter clock wise as well as functions to get the context size
when taking into the accout the widht and height.

[source,c]
-------------------------------------------------------------------------------
/* Transforms point user coordinates to bitmap coordinates */
GP_TRANSFORM_POINT(context, x, y)

/* Transforms rectangular area coordinates and size */
GP_TRANSFORM_RECT(context, x, y, w, h)

/* Inverse transformation, bitmap coordinates to user coordinates */
GP_RETRANSFORM_POINT(context, x, y) 
-------------------------------------------------------------------------------

[source,c]
-------------------------------------------------------------------------------
/*
 * Rotate context flags clock wise. 
 */
void GP_ContextFlagsRotateCW(GP_Context *context);

/*
 * Rotate context flags counter clock wise.
 */
void GP_ContextFlagsRotateCCW(GP_Context *context);

/*
 * Returns context W and H taking the rotation flags into the account.
 */
GP_Size GP_ContextW(const GP_Context *context);
GP_Size GP_ContextH(const GP_Context *context);
-------------------------------------------------------------------------------

Context base functions
~~~~~~~~~~~~~~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

GP_Context *GP_ContextAlloc(GP_Size w, GP_Size h, GP_PixelType type);

GP_Context *GP_ContextCopy(const GP_Context *src, int flag);

void GP_ContextFree(GP_Context *context);
-------------------------------------------------------------------------------

The 'GP_ContextAlloc()' allocates context and initalizes the context
structure. The orientation flags are all set to 0 and the rest of the metadata
are calculated accordingly to width, height and pixel_type.  The bitmap
(context->pixels) is not initalized.

The 'GP_ContextCopy()' allocates and initalizes a copy of the context passed
as argument. If 'flag' is not zero, the bitmap (context->pixels) is copied
otherwise it's left uninitalized.

In both cases the resulting context should later be freed with
'GP_ContextFree()'.

Subcontext
~~~~~~~~~~

Given a rectangular area inside of any context subcontext could be created.
The resulting context could be used for all context operations (including
subcontext creation). The only difference between allocated context and
subcontext of such context is that the 'GP_ContextFree()' doesn't call
'free()' on subcontext pixels (which as a matter of a fact is a pointer that
points somewhere into to allocated area).

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

GP_Context *GP_ContextSubContext(GP_Context *context, GP_Context *subcontext,
                                 GP_Coord x, GP_Coord y, GP_Size w, GP_Size h);
-------------------------------------------------------------------------------

Creates subcontext of a context. The rectangular area must fit into the context.

If subcontext pointer is 'NULL' the context structure is allocated otherwise
the metadata are filled into the context structure pointed by subcontext
pointer.

In both cases pointer to subcontext or NULL (in case of 'malloc(2)' failure) is
returned.

