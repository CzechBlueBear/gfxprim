Drawing Context
---------------

GP_Context is data structure for storing 'in memory' bitmaps.

Data Structure
~~~~~~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
typedef struct GP_Context {
	uint8_t *pixels;         /* Pointer to array of pixels              */
	uint8_t  bpp;            /* Bits per pixel, always be power of two  */
	uint32_t bytes_per_row;  /* Bytes per row, rows are padded to bytes */
	uint32_t w;              /* Width in pixels                         */
	uint32_t h;              /* Height in pixels                        */

	GP_PixelType pixel_type; /* Enum, bitmap pixel type id              */

	int axes_swap:1;         /* Context rotation and mirroring          */
	int x_swap:1;
	int y_swap:1;
} GP_Context;
-------------------------------------------------------------------------------

The 'GP_Context' holds meta-data needed for bitmaps. The values of pixels
are stored as bitmap lines (aligned to bytes) in one dimensional array.
The address of pixel could be determined by GP_PIXEL_ADDRESS(context, x, y)
which returns byte aligned address for the pixel.

Rotation
^^^^^^^^
All gfx functions does honor rotation and mirroring. If you really need drawing
primitives without it use variants with _Raw suffix. 

So GP_Line() is equal to GP_Line_Raw(), when all axes_swap, x_swap and y_swap
are set to zero.

There are various macros for transforming coordinates and sizes in
'core/GP_Transform.h'.

* *GP_TRANSFORM_POINT(x, y)*
* *GP_TRANSFORM_RECT(x, y, w, h)*
* *GP_RETRANSFORM_POINT(x, y)*

Functions
~~~~~~~~~

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

uint32_t GP_ContextW(struct GP_Context *context);
uint32_t GP_ContextH(struct GP_Context *context);
-------------------------------------------------------------------------------

Functions to get context width and height that do honor rotation flags (swaps
W and H if axes_swap is set).

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

void GP_ContextFlagsRotateCW(struct GP_Context *context);
void GP_ContextFlagsRotateCCW(struct GP_Context *context);
-------------------------------------------------------------------------------

Rotate context flags (x_swap, y_swap and axes_swap) clock wise, respectively
counter clock wise.

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

GP_Context *GP_ContextAlloc(uint32_t w, uint32_t h, GP_PixelType type);
-------------------------------------------------------------------------------

Allocates and initializes the 'GP_Context' structure. The size for pixels is
computed from width, height and pixel type. Moreover the rotation flags are
set to zero and clipping rectangle is set to whole bitmap.

The newly allocated context should be later freed with 'GP_ContextFree()'.

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

void GP_ContextFree(GP_Context *context);
-------------------------------------------------------------------------------

Free the context allocated memory.

[source,c]
-------------------------------------------------------------------------------
#include <GP.h>

GP_Context *GP_ContextCopy(GP_Context *context, int flag);
-------------------------------------------------------------------------------

Copy a context. Allocates and initializes a 'GP_Context'. If flag is set to
GP_CONTEXT_WITH_PIXELS, the actual bitmap is copied from context to newly
allocated context, otherwise only context meta-data are copied.

The newly created context should be later freed with 'GP_ContextFree()'.

