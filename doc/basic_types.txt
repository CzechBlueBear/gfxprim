Basic types
-----------
Return Code
~~~~~~~~~~~

Some gfxprim function returns one of following return codes (may be removed in
future):

[source,c]
--------------------------------------------------------------------------------
typedef enum GP_RetCode {
        GP_ESUCCESS,
        GP_EINVAL,
        GP_ENOIMPL,
        GP_EUNPRECISE,
        GP_ENULLPTR,            /* some argument was unexpectedly NULL */
        GP_EBACKENDLOST,
        GP_EBADCONTEXT,         /* context contains invalid data */
        GP_EBADFILE,            /* error in file, or bad file format */
        GP_ENOENT,              /* no such file or another object */
        GP_ENOMEM,              /* not enough memory */
        GP_EMAX,
} GP_RetCode;
--------------------------------------------------------------------------------

Return codes could be translated into an error messages.

[source,c]
--------------------------------------------------------------------------------
const char *GP_RetCodeName(GP_RetCode code);
--------------------------------------------------------------------------------

Coord and Size
~~~~~~~~~~~~~~
For drawing API there are two integer types defined the 'GP_Coord' for
coordinates and 'GP_Size' for size, length or so.


Color and pixel types
~~~~~~~~~~~~~~~~~~~~~

The color, in gfxprim is enumeration of symbolic color names while pixel is
integer value or you may say color in format of the target bitmap.

Color could be converted into given pixel type which will result in integer
value suitable for usage with drawing functions. The color could be also
converted to color name (C string in English language) and C string may be
matched against table of color names.

As all drawing functions works with pixel rather than color the color must be
converted before using function to draw a shape into a bitmap.

The color is defined as follows:

[source,c]
--------------------------------------------------------------------------------
typedef enum GP_Color {
        GP_COL_INVALID = -1,
        GP_COL_BLACK,
	...
} GP_Color;
--------------------------------------------------------------------------------

Color and Pixel conversion functions, the last one returns 'true' in case of
successful match and conversion and false otherwise.

[source,c]
--------------------------------------------------------------------------------
#include <core/GP_Color.h>

GP_Pixel GP_ColorToPixel(GP_Context *context, GP_Color color);

GP_Color GP_ColorNameToColor(const char *color_name);

const char *GP_ColorToColorName(GP_Color color);

bool GP_ColorNameToPixel(GP_Context *context, const char *color_name,
                         GP_Pixel *pixel);
--------------------------------------------------------------------------------

