Basic types
-----------
Coordinates and Size/Length
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Most of the drawing functions use typedefed 'GP_Coord' and 'GP_Size' integer
types for parameters.

The 'GP_Coord' is signed integer which is used for coordinates and the
'GP_Size' is unsigned integer type used for object size, length and so.

Pixel
~~~~~

Pixel value in 'GFXprim' is an integer big enough to hold the actual pixel
values. The default typedef for 'GP_Pixel' is set to 32 bit integer, which may
be changed at compile time to support colors with more than 10 bits per
channel. The 'GP_Pixel' is thus used as opaque value big enough to hold any
supported pixel value.

Color
~~~~~

The 'GP_Color', in gfxprim is enumeration of symbolic color names.

Color could be converted for a given 'GP_PixelType' which will result into
'GP_Pixel' value suitable for usage with drawing functions. The color could be
also converted to color name (C string in English language) and C string may
be matched against table of color names.

The 'GP_Color' enmum is defined as follows:

[source,c]
--------------------------------------------------------------------------------
typedef enum GP_Color {
        GP_COL_INVALID = -1,
        GP_COL_BLACK,
        GP_COL_RED,
        GP_COL_GREEN,
        GP_COL_BLUE,
        GP_COL_YELLOW,
        GP_COL_BROWN,
        GP_COL_ORANGE,
        GP_COL_GRAY_DARK,
        GP_COL_GRAY_LIGHT,
        GP_COL_PURPLE,
        GP_COL_WHITE,
	GP_COL_MAX,
} GP_Color;
--------------------------------------------------------------------------------

Color and Pixel conversion functions, the last one returns 'true' in case of
successful match and conversion and false otherwise.

[source,c]
--------------------------------------------------------------------------------
#include <core/GP_Color.h>
/* or */
#include <GP.h>

GP_Pixel GP_ColorToPixel(GP_Color color, GP_PixelType pixel_type);
GP_Pixel GP_ColorToContextPixel(GP_Color color, GP_Context *context);

GP_Color GP_ColorNameToColor(const char *color_name);
const char *GP_ColorToColorName(GP_Color color);

bool GP_ColorNameToPixel(const char *color_name, GP_PixelType pixel_type,
                         GP_Pixel *pixel);
bool GP_ColorNameToContextPixel(const char *color_name, GP_Context *context,
                                GP_Pixel *pixel);
--------------------------------------------------------------------------------

Functions to convert color to pixel and color to context pixel. The last two
returns true if color with such name was found.

[source,c]
--------------------------------------------------------------------------------
#include <core/GP_Color.h>
/* or */
#include <GP.h>

void GP_ColorLoadPixels(GP_Pixel pixels[], GP_PixelType pixel_type);
void GP_ColorLoadContextPixels(GP_Pixel pixels[], GP_Context *context);
--------------------------------------------------------------------------------

Loads array of 'GP_Pixel' of size 'GP_COL_MAX', the array is then used with
the GP_Color enum as 'pixels[GP_COL_BLACK]'.

Progress Callback
~~~~~~~~~~~~~~~~~

The 'GP_ProgressCallback' is a structure that stores user-defined callback
function and user-defined pointer and percentage.

It is passed as last parameter to functions that could take some time to
complete and adds capability to track the operation progress as well as to
abort the operation.

Currently it's used for filters and loaders.

[source,c]
-------------------------------------------------------------------------------
typdedef struct GP_ProgressCallback {
	float percentage;
	int (*callback)(struct GP_ProgressCallback *self);
	void *priv;
} GP_ProgressCallback;
-------------------------------------------------------------------------------

If non 'NULL' progress callback structure is passed to a function, the
callback function is periodically called and the percentage is updated.

The return value from callback could abort the function execution. If non zero
value is returned the filter is aborted, all memory freed etc.

The callback, if supported, is the last parameter of a function.

