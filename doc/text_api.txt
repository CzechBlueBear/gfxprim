Text
----

NOTE: You may want to see the link:coordinate_system.html[coordinate system] first.

Text
~~~~

Text drawing is controlled by the 'GP_TextStyle' structure defined in
'core/GP_TextStyle.h'. This structure carries the information about font,
letter spacing and pixel multiplication and spacing. (If no font is specified,
the default monospace font is used.)

[source,c]
--------------------------------------------------------------------------------
/* Where the text should be drawn relatively to the specified point */
typedef enum GP_TextAlign {
        GP_ALIGN_LEFT = 0x01,           /* to the left from the point */
        GP_ALIGN_CENTER = 0x02,         /* centered on the point */
        GP_ALIGN_RIGHT = 0x03,          /* to the right from the point */
        GP_VALIGN_ABOVE = 0x10,         /* above the point */
        GP_VALIGN_CENTER = 0x20,        /* centered on the point */
        GP_VALIGN_BASELINE = 0x30,      /* baseline is on the point */
        GP_VALIGN_BELOW = 0x40          /* below the point */
} GP_TextAlign;

void GP_Text(GP_Context *context, const GP_TextStyle *style,
             int x, int y, int align, const char *str, GP_Pixel pixel);
--------------------------------------------------------------------------------

Draws text at the position x and y; the alignment of the text in relation
to the point is specified by alignment flags.
If the 'style' argument is 'NULL', a default style is used.

The text size can be computed by following functions:

[source,c]
--------------------------------------------------------------------------------
unsigned int GP_TextWidth(const GP_TextStyle *style, const char *str);
--------------------------------------------------------------------------------

Returns the width (in pixels) that would be occupied by the string if rendered
using the specified style.

[source,c]
--------------------------------------------------------------------------------
unsigned int GP_TextMaxWidth(const GP_TextStyle *style, unsigned int len);
--------------------------------------------------------------------------------

Returns maximum text width, in pixels, for string with 'len' letters. This call
is useful for variable letter size fonts.

[source,c]
--------------------------------------------------------------------------------
unsigned int GP_TextAscent(const GP_TextStyle *style);
--------------------------------------------------------------------------------

The Ascent is the height in pixels from the top to the baseline.

[source,c]
--------------------------------------------------------------------------------
unsigned int GP_TextDescent(const GP_TextStyle *style);
--------------------------------------------------------------------------------

The Descent is the height in pixels from baseline to the bottom.

[source,c]
--------------------------------------------------------------------------------
unsigned int GP_TextHeight(const GP_TextStyle *style);
--------------------------------------------------------------------------------

The Height is size of the font from top to the bottom, i.e. equals exactly to
the sum of ascent and descent.

