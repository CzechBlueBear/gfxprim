Generated code overview
-----------------------

GP_Pixel.gen.[ch]
~~~~~~~~~~~~~~~~~

.PixelType enum:

[source,c]
--------------------------------------------------------------------------------
typedef enum GP_PixelType {
          GP_PIXEL_UNKNOWN = 0,
	  GP_PIXEL_<TYPE> = ...
	  GP_PIXEL_MAX = 42,
} GP_PixelType;
--------------------------------------------------------------------------------

.For each pixel type TYPE and each channel CHAN:

[source,c]
--------------------------------------------------------------------------------
void GP_Pixel_Print_<TYPE>(GP_Pixel p);

#define GP_Pixel_GET_<CHAN>_<TYPE>(p) 
--------------------------------------------------------------------------------

.For each pixel type TYPE, pixel adress and bit-offset:

[source,c]
--------------------------------------------------------------------------------
GP_PIXEL_ADDR_<TYPE>(context, x, y)
GP_PIXEL_ADDR_OFFSET_<TYPE>(x)
--------------------------------------------------------------------------------

.Pixel-type conversions (not every pair), with and without bit-offsets:

[source,c]
--------------------------------------------------------------------------------
#define GP_Pixel_<TYPE1>_TO_<TYPE2>_OFFSET(p1, o1, p2, o2)
#define GP_Pixel_<TYPE1>_TO_<TYPE2>(p1, p2)
--------------------------------------------------------------------------------

.Pixel type description structure:

[source,c]
--------------------------------------------------------------------------------
const GP_PixelTypeDescription const GP_PixelTypes [] = {
        /* GP_PIXEL_<TYPE> */ {
                .type        = GP_PIXEL_<TYPE>,
                .name        = "<TYPE>",
                .size        = <BITSIZE>,
                .numchannels = <NUMBER_OF_CHANNELS>,
                .bitmap      = "RRRRRRRRGGGGGGGGBBBBBBBBxxxxxxxx",
                .channels    = {
                        { .name = "<CHAN>", .offset = <BITOFFSET>, .size = <BITSIZE> },
        } },
--------------------------------------------------------------------------------

.Blits, not transforming coordinates

Assumes the contexts are of the proper pixel-types and also sizes

[source,c]
--------------------------------------------------------------------------------
void GP_Blit_<TYPE1>_<TYPE2>(const GP_Context *c1, int x1, int y2, int w, int h, GP_Context *c2, int x2, int y2);
inline void GP_Blit_Line_<TYPE1>_<TYPE2>(const GP_Context *c1, int x1, int y2, int w, GP_Context *c2, int x2, int y2);
--------------------------------------------------------------------------------

GP_Pixel_Scale.gen.h
~~~~~~~~~~~~~~~~~~~~

.For all bit-sizes of values in (1, 2, 4, 8). Plus auxiliary macro.

[source,c]
--------------------------------------------------------------------------------
#define GP_SCALE_VAL_<BITSIZE1>_<BITSIZE2>(val)
#define GP_SCALE_VAL(s1, s2, val) ( GP_SCALE_VAL_##s1##_##s2(val) )
--------------------------------------------------------------------------------

GP_Blit.gen.[ch]
~~~~~~~~~~~~~~~~~~~~~~

TODO: Blitting magic 

.Blits within PixelTypes (defined only by bpp):

NOTE: sub-byte-bpp blits that are bit-misaligned are treated by more generic TYPE to TYPE conversion
NOTE: sub-byte-bpp blits for small widths are nonoptimal (checking only 8bits for safety, more via memcpy())

[source,c]
--------------------------------------------------------------------------------
void GP_Blit_<SIZE>bpp(const GP_Context *c1, int x1, int y1, int w, int h,
		       const GP_Context *c2, int x2, int y2);
--------------------------------------------------------------------------------

